add the .htaccess file it the root of the project

----------------------------------------------------------------------------

remove the index.php 

	config/config.php
	$config['index_page'] = '';
----------------------------------------------------------------------------


set the base url

	config/config.php
	$config['base_url'] = 'http://localhost/nairobits.com/';

----------------------------------------------------------------------------
autoload helper classes
	-form
	-url
	-html
	-

	config/autoload.php
	$autoload['libraries'] = array('database', 'session','pagination');
----------------------------------------------------------------------------

autoload libraries classes
	-database
	-session
	-form_validation

	config/autoload.php
	$autoload['helper'] = array('url','html');
----------------------------------------------------------------------------

add the encryption key 

	config/config.php
	$config['encryption_key'] = 'AIzaSyBtW7Y9VM1VFUMZAbnhzHHX2d7TKZwz6uM';
----------------------------------------------------------------------------

add the database credentials

	config/database.php
	$db['default'] = array(
		'dsn'	=> '',
		'hostname' => 'localhost',
		'username' => 'xxxxx',
		'password' => 'xxxxx',
		'database' => 'xxxxx',


	);
----------------------------------------------------------------------------

edit your routes

	config/routes.php
	$route['register'] = 'register';
	$route['default_controller'] = 'login';

----------------------------------------------------------------------------

edit your controller


----------------------------------------------------------------------------
edit your views



----------------------------------------------------------------------------
edit your models


----------------------------------------------------------------------------



----------------------------------------------------------------------------
controllers in MVC
==================

A controller is simply a class that helps delegate work. It is the glue of your web application.

http://example.com/[controller-class]/[controller-method]/[arguments]
Example: http://example.com/news/latest/10

class News extends CI_Controller {

	public function latest($limit = 20)
	{

	}
}

The pages class is extending the CI_Controller class. This means that the new pages class can access the methods and variables defined in the CI_Controller class (system/core/Controller.php).

----------------------------------------------------------------------------
URI Routing
================
Higher routes will always take precedence over lower ones.

CodeIgniter reads its routing rules from top to bottom and routes the request to the first matching rule. Each rule is a regular expression (left-side) mapped to a controller and method name separated by slashes (right-side). When a request comes in, CodeIgniter looks for the first match, and calls the appropriate controller and method, possibly with arguments.

Example:
$route['(:any)'] = 'pages/view/$1'; // matches any request

Typically there is a one-to-one relationship between a URL string and its corresponding controller class/method. The segments in a URI normally follow this pattern:

example.com/class/function/id/

Normally the second segment of the URL is reserved for the function name, but CodeIgniter allows you to remap the URI handler to your own fravour
e.g 
----
example.com/product/1/
example.com/product/2/
example.com/product/3/
example.com/product/4/

Routing rules are defined in your application/config/routes.php file. In it you'll see an array called $route that permits you to specify your own routing criteria. Routes can either be specified using wildcards or Regular Expressions

Wildcards
--------------
	(:num) will match a segment containing only numbers.
	(:any) will match a segment containing any character.

	$route['(:any)'] = 'pages/view/$1';

A typical wildcard route might look something like this:

$route['product/:num'] = "catalog/product_lookup"; //if the literal word "product" is found in the first segment of the URL, and a number is found in the second segment, the "catalog" class and the "product_lookup" method are instead used

Examples
--------------

Here are a few routing examples:

$route['journals'] = "blogs";
A URL containing the word "journals" in the first segment will be remapped to the "blogs" class.

$route['blog/joe'] = "blogs/users/34";
A URL containing the segments blog/joe will be remapped to the "blogs" class and the "users" method. The ID will be set to "34".

$route['product/(:any)'] = "catalog/product_lookup";
A URL with "product" as the first segment, and anything in the second will be remapped to the "catalog" class and the "product_lookup" method.

$route['product/(:num)'] = "catalog/product_lookup_by_id/$1";
A URL with "product" as the first segment, and a number in the second will be remapped to the "catalog" class and the "product_lookup_by_id" method passing in the match as a variable to the function.

Important: Do not use leading/trailing slashes.

Reserved Routes

There are two reserved routes:

$route['default_controller'] = 'welcome';
This route indicates which controller class should be loaded if the URI contains no data, which will be the case when people load your root URL. In the above example, the "welcome" class would be loaded. You are encouraged to always have a default route otherwise a 404 page will appear by default.

$route['404_override'] = '';
This route indicates which controller class should be loaded if the requested controller is not found. It will override the default 404 error page. It won't affect to the show_404() function, which will continue loading the default error_404.php file at application/errors/error_404.php.

Important:  The reserved routes must come before any wildcard or regular expression routes.

----------------------------------------------------------------------------



----------------------------------------------------------------------------